AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Slack Messaging integration

Parameters:
  DynamoDBTableName:
    Type: String
    Default: slack_messages_history

Resources:
  # Create the role with the resources
  SlackMessagingRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  # Define slack-messages Lambda function
  SlackMessagingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: slack_messaging/
      Handler: lambda.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      AutoPublishAlias: live
      Role: !GetAtt SlackMessagingRole.Arn
      Environment:
        Variables:
          SLACK_BOT_USER_OAUTH_TOKEN: "{{resolve:ssm:SLACK_BOT_USER_OAUTH_TOKEN:1}}"
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
      Events:
        SlackMessagingApi:
          Type: Api
          Properties:
            Path: /send_message
            Method: post
      Tracing: Active
      Layers:
        - !Ref libs
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: lambda-dependencies
      Description: Dependencies for Lambda, include slack_sdk
      ContentUri: libs/

  myDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref DynamoDBTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1 
      KeySchema: 
        - 
          AttributeName: "thread_group_key"
          KeyType: "HASH"
        - 
          AttributeName: "ts"
          KeyType: "RANGE"
      AttributeDefinitions: 
        - 
          AttributeName: "thread_group_key"
          AttributeType: "S"
        - 
          AttributeName: "ts"
          AttributeType: "S"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  SlackMessagingFunction:
    Description: "SlackMessagingFunction Lambda Function ARN"
    Value: !GetAtt SlackMessagingFunction.Arn
  SlackMessagingApi:
    Description: "API Gateway endpoint URL for Slack Messaging Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/send_message/"





